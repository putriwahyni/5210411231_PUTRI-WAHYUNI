# -*- coding: utf-8 -*-
"""PBOVII P-5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jeh4CkSu4rgngkjPi5DXcP4HeLv2Y_-P

Pewarisan Praktik
"""
#PUTRI WAHYUNI
#5210411231


#kode program class computerpart
class computerpart:
  def  __init__(self,pabrikan,nama,jenis,harga):
     self.pabrikan = pabrikan
     self.nama = nama
     self.jenis = jenis
     self.harga = harga

class Processor(computerpart):
  def __init__ (self,pabrikan,nama,harga,jumlah_core,speed):
    super().__init__(pabrikan,nama,'processor',harga)
    self.jumlah_core = jumlah_core
    self.speed = speed

class RandonAccessMemory(computerpart):
  def __init__(self,pabrikan,nama,harga,kapasitas):
    super().__init__(pabrikan,nama,'RAM',harga)
    self.kapasitas = kapasitas

class HardDiskSATA(computerpart):
  def __init__ (self,pabrikan,nama,harga,kapasitas,rpm):
    super().__init__(pabrikan,nama,'SATA',harga)
    self.kapasitas = kapasitas
    self.rpm = rpm

p = Processor('intel','Core 12 7740X',4350000,4,'4.3GHz')
m = RandonAccessMemory('V-Gen','DDR4 5ODimm PC19200/2400MHz',328000,'4GB')
hdd = HardDiskSATA('Seagate','HDD 2.5 inch',295000,'500GB',7200)

parts = [p,m,hdd]
for part in parts:
  print('{} {} produksi {}'.format(part.jenis,part.nama,part.pabrikan))

#single inherintance class mahasiswa
class mahasiswa:
    def __init__(self,nama,nim):
        self.nama = nama
        self.nim = nim
    def detailmhs(self):
        return self.nim,self.nama

    def cekmhs(self):
        if self.nim < 150000:
            return"Mahasiswa aktif"
        else:return "Mahasiswa Tidak Terdaftar"

class siswa(mahasiswa):
    def End(self):
        print('Mahasiswa belum melakukan daftar ulang')

mahasiswa1 = mahasiswa("mahasiswa 1",135103)
print(mahasiswa1.detailmhs(),mahasiswa1.cekmhs())
mahasiswa2 = siswa("mahasiswa 2",15503)
print(mahasiswa2.detailmhs(),mahasiswa2.cekmhs())
mahasiswa2.End()

#multilevel inherintance class mahasiswa
class Mahasiswa():
    def __init__(self,nama,nim):
        self.nama = nama
        self.nim = nim

class siswa1(mahasiswa):
    def __init__(self,nama,nim):
        self.nama = nama
        self.nim = nim

class siswa2(siswa1):
    def __init__(self,nama,nim):
        self.nama = nama
        self.nim = nim
     
mhs1= Mahasiswa("Mikasa",1351015)
mhs2 = siswa2("Nezuko",135117)
mhs3 = siswa2("Hncock",134079)

print(mhs1.nama, mhs1.nim)
print(mhs2.nim)
print(mhs3.nama)

#Hierarchical inherintance class mahasiswa
class mahasiswa():
    def _init_(self,nama,nim):
        self.nama = nama
        self.nim = nim

class siswa1(mahasiswa):
    def __init__(self,nama,nim):
        self.nama = nama
        self.nim = nim
    def detsiswa1(self):
        print(self.nama,"alamat: wall rose")

class siswa2(siswa1):
    def __init__(self,nama,nim):
        self.nama = nama
        self.nim = nim
     
    def detsiswa2(self):
        print(self.nama,"jurusan: Informatika")
mhs1= siswa1("Mikasa",1351015)
mhs2 = siswa2("Nezuko",135117)

print(mhs1.nim)
mhs1.detsiswa1()
print(mhs2.nim)
mhs2.detsiswa2()

#Multiple inheritance
class mahasiswa1():
    def __init__(self,nama,nim):
        self.nama = nama 
        self.nim = nim

class mahasiswa2():
    def __init__(self,alamat,jurusan):
        self.alamat = alamat
        self.jurusan = jurusan

class siswa(mahasiswa1,mahasiswa2):
    def __init__(self,nama,nim,alamat,jurusan):
        mahasiswa1.__init__(self,nama,nim)
        mahasiswa2.__init__(self,nama,alamat)

s =siswa("Mikasa",135105,"Wall Rose","Informatika")
print("nim: ",s.nim,"Nama: ",s.nama,"Alamat: ",s.alamat,"Jurusan: ",s.jurusan)

"""Pewarisan Teori"""

#Single inherintace
#Parent class
class Hewan:
  def bersuara(self):
    print('Kucing bersuara')

#child class mewarisi class hewan
class Kucing(Hewan):
  def suara(self):
    print('meong...meong...meong')

#objek
k=Kucing()
k.suara()
k.bersuara()

#Multilevel inheritance
#Parent Class
class Hewan():
    def bersuara(self):
      print('Kucing bersuara')

#child class mewarisi class hewan
class Kucing(Hewan):
  def suara(self):
    print('meong...meong...meong')

#child class AnakKucing mewarisi dari class Hewan
class AnakKucing(Kucing):
  def minum(self):
    print('minum susu')

#objek
ak=AnakKucing()
ak.suara()
ak.bersuara()
ak.minum()

#Hierarchical inheritance

#Class parent
class Induk:
  def fungsiinduk(self):
    print('Fungsi pada parent class.')

#class turunan 1
class Anak1(Induk):
  def fungsianak1(self):
    print('Fungsi pada anak 1.')

#class turunan 2
class Anak2(Induk):
  def fungsianak2(self):
    print('Fungsi pada anak 2')

a1=Anak1()
a2=Anak2()

a1.fungsiinduk()
a1.fungsianak1()

a2.fungsiinduk()
a2.fungsianak2()

#multiple inherintance
#Parent 1
class Perhitungan1:
  def penjumlahan(self,a,b):
    return a+b

#Parent 2
class Perhitungan2:
  def perkalian(self,a,b):
    return a*b

#child
class Hitung(Perhitungan1, Perhitungan2):
  def pembagian(self,a,b):
    return a/b

h=Hitung()
print(h.penjumlahan(20,30))
print(h.perkalian(5,4))
print(h.pembagian(6,12))

"""TUGAS"""

#Hierarchical Inheritance
def rupiah(uang) :
    x = str(uang)
    if len(x) <= 3 :
        return "Rp." + x
    else :  
        a = x[:-3]
        b = x[-3:]
        return rupiah(a) + '.' + b
    
class ComputerPart:
    def __init__(self, pabrikan, nama, harga, generasi) :
        self.pabrikan = pabrikan
        self.nama = nama    
        self.harga = harga
        self.generasi = generasi

class Processor(ComputerPart) :
    def __init__(self, pabrikan, nama, harga,generasi) :
        self.pabrikan = pabrikan
        self.nama = nama 
        self.harga = harga
        self.generasi = generasi
        
    def Tampil(self) :  
        print(f"{self.nama} produk dari {self.pabrikan}")
        print(f"Harga : {rupiah(self.harga)}")
        print(f"Processor generasi ke {self.generasi}")

class RandomAccessMemory(ComputerPart) :
    def __init__(self, pabrikan, nama, harga, kapasitas) :
        self.pabrikan = pabrikan
        self.nama = nama 
        self.harga = harga
        self.kapasitas = kapasitas

    def Tampil(self) :  
        print(f"{self.nama} produk dari {self.pabrikan}")
        print(f"Kapasitas : {self.kapasitas}")
        print(f"Harga : {rupiah(self.harga)}")

class HardDiskSATA(ComputerPart) :
    def __init__(self, pabrikan, nama, harga, kapasitas, rpm) :
        self.pabrikan = pabrikan
        self.nama = nama 
        self.harga = harga
        self.kapasitas = kapasitas
        self.rpm = rpm

    def Tampil(self) :
        print(f"{self.nama} produk dari {self.pabrikan}")
        print(f"Kapasitas : {self.kapasitas}")
        print(f"RPM : {self.rpm}")
        print(f"Harga : {rupiah(self.harga)}")

proc = Processor('Intel', 'Core i9-9900K', 5985000,9)
RAM = RandomAccessMemory('V-Gen', 'DDR4 SODimm PC19200/2400MHz', 328000, "4GB")
HDD = HardDiskSATA('Seagate', 'HDD 2.5 inch', 295000, '500GB', 7200)

parts = [proc, RAM, HDD]   
print("\n\t\t\tHIERARCHIAL COMPUTER PART")
print("=================================================================================")
for part in parts :
    part.Tampil()
    print("")

# Multilevel Inheritance
def rupiah(uang):
    x = str(uang)
    if len(x) <= 3:
        return "Rp." + x
    else:
        a = x[:-3]
        b = x[-3:]
        return rupiah(a) + '.' + b


class ComputerPart:
    def __init__(self, pabrikan, nama, harga, generasi):
        self.pabrikan = pabrikan
        self.nama = nama
        self.harga = harga
        self.generasi = generasi


class Processor(ComputerPart):
    def __init__(self, pabrikan, nama, harga, generasi):
        self.pabrikan = pabrikan
        self.nama = nama
        self.harga = harga
        self.generasi = generasi

    def Tampil(self):
        print(
            f"{self.nama} produk dari {self.pabrikan} dijual dengan harga : {rupiah(self.harga)}")


class RandomAccessMemory(Processor):
    def __init__(self, pabrikan, nama, harga):
        self.pabrikan = pabrikan
        self.nama = nama
        self.harga = harga

    def Tampil(self):
        print(
            f"{self.nama} produk dari {self.pabrikan} dijual dengan harga : {rupiah(self.harga)}")


class HardDiskSATA(RandomAccessMemory):
    def __init__(self, pabrikan, nama, harga):
        self.pabrikan = pabrikan
        self.nama = nama
        self.harga = harga

    def Tampil(self):
        print(
            f"{self.nama} produk dari {self.pabrikan} dijual dengan harga : {rupiah(self.harga)}")


proc = Processor('Intel', 'Core i9-9900K', 5985000,9)
RAM = RandomAccessMemory('V-Gen', 'DDR4 SODimm PC19200/2400MHz', 328000)
HDD = HardDiskSATA('Seagate', 'HDD 2.5 inch', 295000)

parts = [proc, RAM, HDD]
print("\n\t\t\tMULTILEVEL COMPUTER PART")
print("=================================================================================")
for part in parts:
    part.Tampil()

# Multiple Inheritance
def rupiah(uang):
    x = str(uang)
    if len(x) <= 3:
        return "Rp." + x
    else:
        a = x[:-3]
        b = x[-3:]
        return rupiah(a) + '.' + b


class ComputerPart1():
    def __init__(self, pabrikan, nama):
        self.pabrikan = pabrikan
        self.nama = nama


class ComputerPart2():
    def __init__(self, harga):
        self.harga = harga


class Processor(ComputerPart1, ComputerPart2):
    def __init__(self, pabrikan, nama, harga):
        ComputerPart1.__init__(self, pabrikan, nama)
        ComputerPart2.__init__(self, harga)

    def Tampil(self):
        print(f"{self.nama} produk dari {self.pabrikan}")
        print(f"Harga : {rupiah(self.harga)}")


class RandomAccessMemory(ComputerPart1, ComputerPart2):
    def __init__(self, pabrikan, nama, harga):
        ComputerPart1.__init__(self, pabrikan, nama)
        ComputerPart2.__init__(self, harga)

    def Tampil(self):
        print(f"{self.nama} produk dari {self.pabrikan}")
        print(f"Harga : {rupiah(self.harga)}")


class HardDiskSATA(ComputerPart1, ComputerPart2):
    def __init__(self, pabrikan, nama, harga):
        ComputerPart1.__init__(self, pabrikan, nama)
        ComputerPart2.__init__(self, harga)

    def Tampil(self):
        print(f"{self.nama} produk dari {self.pabrikan}")
        print(f"Harga : {rupiah(self.harga)}")


proc = Processor('Intel', 'Core i9-9900K', 5985000)
RAM = RandomAccessMemory('V-Gen', 'DDR4 SODimm PC19200/2400MHz', 328000)
HDD = HardDiskSATA('Seagate', 'HDD 2.5 inch', 295000)

parts = [proc, RAM, HDD]
print("\n\t\t\tMULTIPLE COMPUTER PART")
print("============================================================================")
for part in parts:
    part.Tampil()
    print("")