# -*- coding: utf-8 -*-
"""PBOPVII P-6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u1iATI-LhoSfCATT1jv0nFKgJN6-gcKu

5210411231_PUTRI WAHYUNI      
INFORMATIKA E

polymorphism Praktik
"""

#Polymorphism dengan fungsi

print(len("Polymorphism"))
print(len([0,1,2,3]))

'''
Menggunakan fungsi len 
Output:
12 (Tipe Data String)
4 (Tipe Data List)
'''

#using class
class jerman:
  def ibukota(self):
    print("Berlin adalah ibukota negara Jerman")

class jepang:
  def ibukota(self):
    print("Tokyo adalah ibukota negra jepang")

negara1 = jerman()
negara2 = jepang()

for country in (negara1,negara2):
  country.ibukota()

#polymorphism dengan class

class Kucing:
  def __init__(self, nama, umur):
    self.nama = nama
    self.umur = umur

  def bersuara(self):
    print("Meow")

class Dog:
  def __init__(self, nama, umur):
    self.nama = nama
    self.umur = umur

  def bersuara(self):
    print("Guk..guk..")

kucing1 = Kucing("Tom", 3)
anjing1 = Dog("Spike", 4)

for hewan in (kucing1, anjing1):
  hewan.bersuara()

#polymorphism dengan inheritance

class Burung:
  def intro(self):
    print("Di dunian ini ada beberapa type berbeda dari spesies burung")

  def terbang(self):
    print("Hampir semua burung dapat terbang, namun ada beberapa yang tidak dapat terbang")

class Elang(Burung):
  def terbang(self):
    print("Elang dapat terbang")

class BurungUnta(Burung):
  def terbang(self):
    print("Burung unta tidak dapat terbang")

obj_burung = Burung()
obj_elang = Elang()
obj_burung_unta = BurungUnta()

obj_burung.intro()
obj_burung.terbang()

obj_elang.intro()
obj_elang.terbang()

obj_burung_unta.intro()
obj_burung_unta.terbang()

#implementasi kelas abstrak
from abc import ABC, abstractmethod
class bentuk(ABC):
    @abstractmethod
    def luas(self):
        return self.__sisi *self.__sisi

    @abstractmethod
    def keliling(self):
        return 4 * self.__sisi

class persegi(bentuk):
    def __init__(self,sisi):
        self.__sisi = sisi
    def luas(self):
        return self.__sisi * self.__sisi
    def keliling(self):
        return 4* self.__sisi

persegi = persegi(6)
print(persegi.luas())
print(persegi.keliling())

#Implementasi Overloading Class Pegawai
class Pegawai :
    jumlah = 0

    def __init__(self, nama, gaji) :
        self.nama = nama
        self.gaji = gaji
        Pegawai.jumlah += 1

    def tampilJumlah(self) :
        print(f"Total Pegawai : {Pegawai.jumlah}")

    def tampilPegawai(self) :
        print(f"Nama Pegawai : {self.nama}")

    def tunjangan(self, istri = None, anak = None) :
        if anak != None and istri != None :
            total = anak + istri
            print(f"Tunjangan anak + istri = {total}")
        else :
            total = istri
            print(f"Tunjangan istri = {total}")

pegawai1 = Pegawai("Eren", 2000)
pegawai2 = Pegawai("Luffy", 6000)

pegawai1.tampilPegawai()
pegawai2.tampilPegawai()

pegawai1.tunjangan(2500, 2000)  #Overloading
pegawai2.tunjangan(2500)        #Overloading

print("Total pegawai = %d" % Pegawai.jumlah)
rataGaji = (pegawai1.gaji + pegawai2.gaji) / Pegawai.jumlah
print(f"Rata-rata gaji = {str(rataGaji)}")

#overriding class segiempat
class segiempat:
  def __init__(self, panjang, lebar):
    self.panjang = panjang
    self.lebar = lebar

  def hitungLuas(self): #method overriding
    print("Luas Segiempat =", self.panjang * self.lebar, "m^2")

class Bujursangkar(segiempat):
  def __init__(self, sisi):
    self.side = sisi
    segiempat.__init__(self,sisi,sisi)

  def hitungLuas(self):
    print("Luas Bujur Sangkar =", self.side*self.side, "m^2")

b=Bujursangkar(4)
s=segiempat(2,4)
b.hitungLuas()
s.hitungLuas()

#implementasi overloading class mahasiswa
class mahasiswa:
    def __init__(self,nama,nim):
        self.nama = nama
        self.nim = nim
    def tampilmhs(self):
        print("Nama: ",self.nama, ",nim: ",self.nim)

    def hitungsks(self, jmlsks=None, sks=None):
        if jmlsks  !=None and sks !=None:
            totalsks = jmlsks + sks
            print("Total sks = ",totalsks)
        else:
            totalsks = jmlsks
            print("Total sks = ",totalsks)

mhs1 = mahasiswa("Eren", 12345)
mhs2 = mahasiswa("Luffy",22243536)
mhs1.tampilmhs()
mhs2.tampilmhs()
mhs1.hitungsks(80,34)
mhs2.hitungsks(83)

#Implementasi Overriding Class Mahasiswa
class Mahasiswa :
    def __init__(self, nama, nim) :
        self.nama = nama
        self.nim = nim

    def tampil(self) :
        print(f"Nama\t\t: {self.nama} \nNim \t\t: {self.nim}\n")

class Hitung(Mahasiswa) :
    def __init__(self, nama, nim, jmlhsks, sks) :
        super().__init__(nama, nim)
        self.jmlhsks = jmlhsks
        self.sks = sks
       

    #Override Method
    def tampil(self):
        totalsks = self.jmlhsks + self.sks

        if totalsks>=100 :
            print(f"Nama\t\t: {self.nama} \nNim \t\t: {self.nim}")
            print(f"Total Sks\t: {totalsks}")
            print("Diperbolehkan mengambil skripsi\n")
        else :
            print(f"Nama\t\t: {self.nama} \nNim \t\t: {self.nim}")
            print(f"Total Sks\t: {totalsks}")
            print("Tidak diperbolehkan mengambil skripsi\n")
       
mahasiswa1 = Mahasiswa("Eren", 123180015)
mahasiswa2 = Hitung("Mikasa", 123190007, 84, 22)

mahasiswa1.tampil()
mahasiswa2.tampil()

#Implementasi Overloading Method pada class Computer Part
def rupiah(uang) :
    x = str(uang)
    if len(x) <= 3 :
        return "Rp." + x
    else :  
        a = x[:-3]
        b = x[-3:]
        return rupiah(a) + '.' + b
    
class ComputerPart:
    def __init__(self, pabrikan, nama, harga, generasi) :
        self.pabrikan = pabrikan
        self.nama = nama    
        self.harga = harga
        self.generasi = generasi

class Processor(ComputerPart) :
    def __init__(self, pabrikan, nama, harga, generasi) :
        self.pabrikan = pabrikan
        self.nama = nama 
        self.harga = harga
        self.generasi =  generasi
            
    def Tampil(self) :  
        print("\nTampil dari sub class Processor")
        print(f"{self.nama} produk dari {self.pabrikan}")
        print(f"Harga\t\t: {rupiah(self.harga)}")
        print(f"Generasi ke\t: {self.generasi}")

class RandomAccessMemory(ComputerPart) :
    def __init__(self, pabrikan, nama, harga) :
        self.pabrikan = pabrikan
        self.nama = nama   
        self.harga = harga

    #Overload Method
    def Tampil(self, kapasitas) : 
        print("\nTampil dari sub class RandomAccessMemory")
        print(f"{self.nama} produk dari {self.pabrikan}\nKapasitas\t: {kapasitas}")
        print(f"Harga\t\t: {rupiah(self.harga)}")

class HardDiskSATA(ComputerPart) :
    def __init__(self, pabrikan, nama, harga) :
        self.pabrikan = pabrikan
        self.nama = nama  
        self.harga = harga

    #Overload Method
    def Tampil(self, kapasitas, rpm) : 
        print("\nTampil dari sub class HardDiskSATA")
        print(f"{self.nama} produk dari {self.pabrikan}\nKapasitas\t: {kapasitas}")
        print(f"RPM\t\t: {rpm}\nHarga\t\t: {rupiah(self.harga)}")


proc = Processor('Intel', 'Core i7 7740X', 4350000, 5)
ram = RandomAccessMemory('V-Gen', 'DDR4 SODimm PC19200/2400MHz', 328000)
hdd = HardDiskSATA('Seagate', 'HDD 2.5 inch', 295000)

print("\n\t\t\tOVERLOADING COMPUTER PART")
print("---------------------------------------------------------------------------------")
proc.Tampil()
ram.Tampil("4GB")
hdd.Tampil("500GB", 7200)

#Implementasi Overriding Method pada class Computer Part
def rupiah(uang) :
    x = str(uang)
    if len(x) <= 3 :
        return "Rp." + x
    else : 
        a = x[:-3]
        b = x[-3:]
        return rupiah(a) + '.' + b
    
class ComputerPart:
    def __init__(self, pabrikan, nama, harga) :
        self.pabrikan = pabrikan
        self.nama = nama   
        self.harga = harga

class Processor(ComputerPart) :
    def __init__(self, pabrikan, nama, harga, generasi) :
        self.pabrikan = pabrikan
        self.nama = nama 
        self.harga = harga
        self.generasi = generasi
        
    def Tampil(self) :  
        print("\nTampil dari sub class Processor")
        print(f"{self.nama} produk dari {self.pabrikan}")
        print(f"Harga\t\t: {rupiah(self.harga)}")
        print(f"Generasi ke\t: {self.generasi}")

class RandomAccessMemory(ComputerPart) :
    def __init__(self, pabrikan, nama, harga, kapasitas) :
        super().__init__(pabrikan, nama, harga)
        self.kapasitas = kapasitas

    # Override  Method
    def Tampil(self) :  
        print("Tampil dari sub class RandomAccessMemory")
        print(f"{self.nama} produk dari {self.pabrikan}\nKapasitas\t: {self.kapasitas}")
        print(f"Harga\t\t: {rupiah(self.harga)}")

class HardDiskSATA(ComputerPart) :
    def __init__(self, pabrikan, nama, harga, kapasitas, rpm) :
        super().__init__(pabrikan, nama, harga)
        self.kapasitas = kapasitas
        self.rpm = rpm 

    # Override  Method
    def Tampil(self) :
        print("Tampil dari sub class HardDiskSATA")
        print(f"{self.nama} produk dari {self.pabrikan}\nKapasitas\t: {self.kapasitas}")
        print(f"RPM\t\t: {self.rpm}\nHarga\t\t: {rupiah(self.harga)}")

proc = Processor('Intel', 'Core i7 7740X', 4350000, 5)
ram = RandomAccessMemory('V-Gen', 'DDR4 SODimm PC19200/2400MHz', 328000, "4GB")
hdd = HardDiskSATA('Seagate', 'HDD 2.5 inch', 295000, '500GB', 7200)

parts = [proc, ram, hdd]  
print("\n\t\t\tOVERRIDING COMPUTER PART")
print("---------------------------------------------------------------------------------")
for part in parts :
    part.Tampil()
    print("")